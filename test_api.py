#!/usr/bin/env python3
"""
–¢–µ—Å—Ç API —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
"""
import requests
import json

BASE_URL = "http://localhost:8000"

def test_health():
    """–¢–µ—Å—Ç health check"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º health check...")
    response = requests.get(f"{BASE_URL}/api/v1/health")
    print(f"Status: {response.status_code}")
    print(f"Response: {response.json()}")
    print()

def test_dataset_info():
    """–¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞—Ç–∞—Å–µ—Ç–µ"""
    print("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º dataset info...")
    response = requests.get(f"{BASE_URL}/api/v1/dataset-info")
    print(f"Status: {response.status_code}")
    data = response.json()
    print(f"Total points: {data['total_points']}")
    print(f"VIP clients: {data['vip_clients']}")
    print(f"Standard clients: {data['standard_clients']}")
    print()

def test_route_optimization():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –º–∞—Ä—à—Ä—É—Ç–∞...")
    
    test_request = {
        "points": [
            {
                "id": 1,
                "address": "—É–ª. –ë–æ–ª—å—à–∞—è –°–∞–¥–æ–≤–∞—è, –¥. 1",
                "latitude": 47.221532,
                "longitude": 39.704423,
                "work_start": "09:00",
                "work_end": "18:00",
                "lunch_start": "13:00",
                "lunch_end": "14:00",
                "client_level": "VIP",
                "stop_duration": 30
            },
            {
                "id": 2,
                "address": "–ø—Ä. –ë—É–¥–µ–Ω–Ω–æ–≤—Å–∫–∏–π, –¥. 15",
                "latitude": 47.228945,
                "longitude": 39.718762,
                "work_start": "09:00",
                "work_end": "18:00",
                "lunch_start": "13:00",
                "lunch_end": "14:00",
                "client_level": "Standart",
                "stop_duration": 30
            },
            {
                "id": 3,
                "address": "—É–ª. –ö—Ä–∞—Å–Ω–æ–∞—Ä–º–µ–π—Å–∫–∞—è, –¥. 67",
                "latitude": 47.235671,
                "longitude": 39.689543,
                "work_start": "09:00",
                "work_end": "18:00",
                "lunch_start": "13:00",
                "lunch_end": "14:00",
                "client_level": "Standart",
                "stop_duration": 30
            }
        ],
        "start_time": "09:00",
        "traffic_level": 3,
        "transport_mode": "car",
        "start_point": [47.220000, 39.700000]
    }
    
    response = requests.post(
        f"{BASE_URL}/api/v1/optimize-route",
        json=test_request,
        headers={"Content-Type": "application/json"}
    )
    
    print(f"Status: {response.status_code}")
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        print(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: {data['optimized_order']}")
        print(f"–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {data['arrival_times']}")
        print(f"–û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {data['total_distance']:.2f} –∫–º")
        print(f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {data['total_time']:.2f} –º–∏–Ω")
        print(f"–£—Å–ø–µ—Ö: {data['success']}")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {data['message']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
    print()

def test_route_from_dataset():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    print("üìà –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
    
    params = {
        "start_time": "09:00",
        "traffic_level": 3,
        "transport_mode": "car",
        "optimization_method": "hybrid", 
        "max_points": 5
    }
    
    response = requests.post(
        f"{BASE_URL}/api/v1/optimize-route-from-dataset",
        params=params
    )
    
    print(f"Status: {response.status_code}")
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞ —É—Å–ø–µ—à–Ω–∞!")
        print(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: {data['optimized_order']}")
        print(f"–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {data['arrival_times']}")
        print(f"–û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {data['total_distance']:.2f} –∫–º")
        print(f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {data['total_time']:.2f} –º–∏–Ω")
        print(f"–ú–µ—Ç–æ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {data.get('optimization_method', 'hybrid')}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
    print()

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é\n")
    
    try:
        test_health()
        test_dataset_info()
        test_route_optimization()
        test_route_from_dataset()
        
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8000")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
