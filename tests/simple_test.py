#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—è–∂–µ–ª—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import pandas as pd
import numpy as np
from typing import List, Tuple
import json

def test_data_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç
        df = pd.read_csv("data/dataset.csv")
        print(f"‚úÖ –î–∞—Ç–∞—Å–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {len(df)} —Å—Ç—Ä–æ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        expected_columns = [
            '–ù–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞', '–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞', '–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —à–∏—Ä–æ—Ç–∞', 
            '–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –¥–æ–ª–≥–æ—Ç–∞', '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è',
            '–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è', '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±–µ–¥–∞', 
            '–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±–µ–¥–∞', '–£—Ä–æ–≤–µ–Ω—å –∫–ª–∏–µ–Ω—Ç–∞'
        ]
        
        missing_columns = [col for col in expected_columns if col not in df.columns]
        if missing_columns:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
            return False
        
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        vip_count = len(df[df['–£—Ä–æ–≤–µ–Ω—å –∫–ª–∏–µ–Ω—Ç–∞'] == 'VIP'])
        standard_count = len(df[df['–£—Ä–æ–≤–µ–Ω—å –∫–ª–∏–µ–Ω—Ç–∞'] == 'Standart'])
        
        print(f"‚úÖ VIP –∫–ª–∏–µ–Ω—Ç–æ–≤: {vip_count}")
        print(f"‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {standard_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        lat_range = (df['–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —à–∏—Ä–æ—Ç–∞'].min(), df['–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —à–∏—Ä–æ—Ç–∞'].max())
        lon_range = (df['–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –¥–æ–ª–≥–æ—Ç–∞'].min(), df['–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –¥–æ–ª–≥–æ—Ç–∞'].max())
        
        print(f"‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω —à–∏—Ä–æ—Ç: {lat_range}")
        print(f"‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–æ–ª–≥–æ—Ç: {lon_range}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_coordinate_calculation():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π...")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = pd.read_csv("data/dataset.csv")
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–æ—á–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–∞
        test_points = df.head(5)
        
        def calculate_distance(point1, point2):
            """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è"""
            lat1, lon1 = point1
            lat2, lon2 = point2
            
            # –§–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
            R = 6371  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
            dlat = np.radians(lat2 - lat1)
            dlon = np.radians(lon2 - lon1)
            a = np.sin(dlat/2)**2 + np.cos(np.radians(lat1)) * np.cos(np.radians(lat2)) * np.sin(dlon/2)**2
            c = 2 * np.arcsin(np.sqrt(a))
            distance = R * c
            
            return distance
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
        distances = []
        for i in range(len(test_points)):
            for j in range(i+1, len(test_points)):
                point1 = (test_points.iloc[i]['–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —à–∏—Ä–æ—Ç–∞'], 
                         test_points.iloc[i]['–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –¥–æ–ª–≥–æ—Ç–∞'])
                point2 = (test_points.iloc[j]['–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —à–∏—Ä–æ—Ç–∞'], 
                         test_points.iloc[j]['–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –¥–æ–ª–≥–æ—Ç–∞'])
                
                distance = calculate_distance(point1, point2)
                distances.append(distance)
                
                print(f"   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ {i+1} –∏ {j+1}: {distance:.2f} –∫–º")
        
        avg_distance = np.mean(distances)
        print(f"‚úÖ –°—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏: {avg_distance:.2f} –∫–º")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π: {e}")
        return False

def test_time_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏...")
    
    try:
        from datetime import datetime
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–∞
        valid_times = ["09:00", "18:00", "13:00", "14:00"]
        invalid_times = ["25:00", "12:60", "abc", "9:00", "09:0", "9:00"]
        
        def validate_time_format(time_str):
            """–°—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ HH:MM"""
            try:
                if len(time_str) != 5 or time_str[2] != ':':
                    return False
                datetime.strptime(time_str, '%H:%M')
                return True
            except ValueError:
                return False
        
        for time_str in valid_times:
            if validate_time_format(time_str):
                print(f"‚úÖ –í—Ä–µ–º—è {time_str} –≤–∞–ª–∏–¥–Ω–æ")
            else:
                print(f"‚ùå –í—Ä–µ–º—è {time_str} –Ω–µ–≤–∞–ª–∏–¥–Ω–æ")
                return False
        
        for time_str in invalid_times:
            if validate_time_format(time_str):
                print(f"‚ùå –í—Ä–µ–º—è {time_str} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º")
                return False
            else:
                print(f"‚úÖ –í—Ä–µ–º—è {time_str} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return False

def test_simple_optimization():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = pd.read_csv("data/dataset.csv")
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–æ—á–µ–∫
        test_points = df.head(5)
        
        def simple_greedy_optimization(points):
            """–ü—Ä–æ—Å—Ç–æ–π –∂–∞–¥–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º"""
            n = len(points)
            visited = [False] * n
            route = [0]  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
            visited[0] = True
            
            current = 0
            
            while len(route) < n:
                best_next = -1
                best_distance = float('inf')
                
                for next_point in range(n):
                    if not visited[next_point]:
                        # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                        lat1 = points.iloc[current]['–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —à–∏—Ä–æ—Ç–∞']
                        lon1 = points.iloc[current]['–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –¥–æ–ª–≥–æ—Ç–∞']
                        lat2 = points.iloc[next_point]['–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —à–∏—Ä–æ—Ç–∞']
                        lon2 = points.iloc[next_point]['–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –¥–æ–ª–≥–æ—Ç–∞']
                        
                        # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                        distance = ((lat2 - lat1)**2 + (lon2 - lon1)**2)**0.5
                        
                        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç VIP –∫–ª–∏–µ–Ω—Ç–∞–º
                        if points.iloc[next_point]['–£—Ä–æ–≤–µ–Ω—å –∫–ª–∏–µ–Ω—Ç–∞'] == 'VIP':
                            distance *= 0.8
                        
                        if distance < best_distance:
                            best_distance = distance
                            best_next = next_point
                
                if best_next != -1:
                    route.append(best_next)
                    visited[best_next] = True
                    current = best_next
            
            return route
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        optimized_route = simple_greedy_optimization(test_points)
        
        print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: {optimized_route}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–æ—á–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã
        if len(set(optimized_route)) == len(test_points):
            print("‚úÖ –í—Å–µ —Ç–æ—á–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ –º–∞—Ä—à—Ä—É—Ç")
        else:
            print("‚ùå –ù–µ –≤—Å–µ —Ç–æ—á–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ –º–∞—Ä—à—Ä—É—Ç")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç VIP –∫–ª–∏–µ–Ω—Ç–æ–≤
        vip_positions = []
        for i, point_idx in enumerate(optimized_route):
            if test_points.iloc[point_idx]['–£—Ä–æ–≤–µ–Ω—å –∫–ª–∏–µ–Ω—Ç–∞'] == 'VIP':
                vip_positions.append(i)
        
        print(f"‚úÖ VIP –∫–ª–∏–µ–Ω—Ç—ã –≤ –ø–æ–∑–∏—Ü–∏—è—Ö: {vip_positions}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def test_api_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
        required_files = [
            "main.py",
            "app/schemas/models.py", 
            "app/models/data_processor.py",
            "app/models/gnn_optimizer.py",
            "requirements.txt",
            "README.md",
            "config.py",
            "setup.py"
        ]
        
        missing_files = []
        for file in required_files:
            try:
                with open(file, 'r') as f:
                    content = f.read()
                    if len(content) > 0:
                        print(f"‚úÖ –§–∞–π–ª {file} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π")
                    else:
                        print(f"‚ùå –§–∞–π–ª {file} –ø—É—Å—Ç–æ–π")
                        missing_files.append(file)
            except FileNotFoundError:
                print(f"‚ùå –§–∞–π–ª {file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                missing_files.append(file)
        
        if missing_files:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É main.py
        with open("main.py", 'r') as f:
            main_content = f.read()
            
        required_imports = [
            "from fastapi import FastAPI",
            "from app.routers",
            "app.include_router"
        ]
        
        missing_imports = []
        for import_stmt in required_imports:
            if import_stmt not in main_content:
                missing_imports.append(import_stmt)
        
        if missing_imports:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–º–ø–æ—Ä—Ç—ã: {missing_imports}")
            return False
        
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –≤ —Ä–æ—É—Ç–µ—Ä–µ
        try:
            with open("app/routers/route_optimization.py", 'r') as f:
                router_content = f.read()
                
            required_endpoints = [
                "@router.get(\"/health\")",
                "@router.post(\"/optimize-route"
            ]
            
            missing_endpoints = []
            for endpoint in required_endpoints:
                if endpoint not in router_content:
                    missing_endpoints.append(endpoint)
            
            if missing_endpoints:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –≤ —Ä–æ—É—Ç–µ—Ä–µ: {missing_endpoints}")
                return False
            
            print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
        except FileNotFoundError:
            print("‚ùå –§–∞–π–ª —Ä–æ—É—Ç–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤")
    print("=" * 60)
    
    tests = [
        ("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", test_data_loading),
        ("–†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π", test_coordinate_calculation),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏", test_time_validation),
        ("–ü—Ä–æ—Å—Ç–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", test_simple_optimization),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ API", test_api_structure)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã –¢–µ—Å—Ç: {test_name}")
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–π–¥–µ–Ω")
            else:
                print(f"‚ùå –¢–µ—Å—Ç '{test_name}' –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
    
    return passed == total

if __name__ == "__main__":
    main()
