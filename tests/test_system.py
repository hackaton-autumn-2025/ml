import requests
import json
import time
from datetime import datetime
import matplotlib.pyplot as plt
import folium
from typing import List, Tuple

class RouteOptimizationTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    
    def __init__(self, api_url: str = "http://localhost:8000"):
        self.api_url = api_url
        
    def test_health(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            response = requests.get(f"{self.api_url}/health")
            if response.status_code == 200:
                print("‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É: {e}")
            return False
    
    def test_dataset_info(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞—Ç–∞—Å–µ—Ç–µ"""
        try:
            response = requests.get(f"{self.api_url}/dataset-info")
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—Ç–∞—Å–µ—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞:")
                print(f"   –í—Å–µ–≥–æ —Ç–æ—á–µ–∫: {data['total_points']}")
                print(f"   VIP –∫–ª–∏–µ–Ω—Ç–æ–≤: {data['vip_clients']}")
                print(f"   –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {data['standard_clients']}")
                return data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞—Ç–∞—Å–µ—Ç–µ: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞—Ç–∞—Å–µ—Ç–µ: {e}")
            return None
    
    def test_route_optimization_from_dataset(self):
        """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
        try:
            params = {
                "start_time": "09:00",
                "traffic_level": 3,
                "transport_mode": "car",
                "optimization_method": "genetic",
                "max_points": 10
            }
            
            print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
            start_time = time.time()
            
            response = requests.post(f"{self.api_url}/optimize-route-from-dataset", params=params)
            
            end_time = time.time()
            processing_time = end_time - start_time
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–∞ {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
                print(f"   –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: {data['optimized_order'][:5]}...")
                print(f"   –û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {data['total_distance']} –∫–º")
                print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {data['total_time']} –º–∏–Ω—É—Ç")
                print(f"   VIP –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –º–∞—Ä—à—Ä—É—Ç–µ: {data['statistics']['vip_clients']}")
                
                return data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            return None
    
    def test_custom_route_optimization(self):
        """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞"""
        try:

            test_points = [
                {
                    "id": 1,
                    "address": "—É–ª. –ë–æ–ª—å—à–∞—è –°–∞–¥–æ–≤–∞—è, –¥. 1",
                    "latitude": 47.221532,
                    "longitude": 39.704423,
                    "work_start": "09:00",
                    "work_end": "18:00",
                    "lunch_start": "13:00",
                    "lunch_end": "14:00",
                    "client_level": "VIP",
                    "stop_duration": 30
                },
                {
                    "id": 2,
                    "address": "–ø—Ä. –ë—É–¥–µ–Ω–Ω–æ–≤—Å–∫–∏–π, –¥. 15",
                    "latitude": 47.228945,
                    "longitude": 39.718762,
                    "work_start": "09:00",
                    "work_end": "18:00",
                    "lunch_start": "13:00",
                    "lunch_end": "14:00",
                    "client_level": "Standart",
                    "stop_duration": 20
                },
                {
                    "id": 3,
                    "address": "—É–ª. –ö—Ä–∞—Å–Ω–æ–∞—Ä–º–µ–π—Å–∫–∞—è, –¥. 67",
                    "latitude": 47.235671,
                    "longitude": 39.689543,
                    "work_start": "10:00",
                    "work_end": "19:00",
                    "lunch_start": "13:00",
                    "lunch_end": "14:00",
                    "client_level": "VIP",
                    "stop_duration": 45
                }
            ]
            
            request_data = {
                "points": test_points,
                "start_time": "09:00",
                "traffic_level": 5,
                "transport_mode": "car",
                "start_point": [47.220000, 39.700000],
                "optimization_method": "genetic"
            }
            
            print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞...")
            start_time = time.time()
            
            response = requests.post(
                f"{self.api_url}/optimize-route",
                json=request_data,
                headers={"Content-Type": "application/json"}
            )
            
            end_time = time.time()
            processing_time = end_time - start_time
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –º–∞—Ä—à—Ä—É—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–∞ {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
                print(f"   –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: {data['optimized_order']}")
                print(f"   –í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {data['arrival_times']}")
                print(f"   –û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {data['total_distance']} –∫–º")
                print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {data['total_time']} –º–∏–Ω—É—Ç")
                
                return data
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞: {e}")
            return None
    
    def compare_optimization_methods(self):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        methods = ["genetic", "greedy"]
        results = {}
        
        print("üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
        
        for method in methods:
            try:
                params = {
                    "start_time": "09:00",
                    "traffic_level": 3,
                    "transport_mode": "car",
                    "optimization_method": method,
                    "max_points": 8
                }
                
                start_time = time.time()
                response = requests.post(f"{self.api_url}/optimize-route-from-dataset", params=params)
                end_time = time.time()
                
                if response.status_code == 200:
                    data = response.json()
                    results[method] = {
                        "total_time": data['total_time'],
                        "total_distance": data['total_distance'],
                        "processing_time": end_time - start_time,
                        "route": data['optimized_order']
                    }
                    print(f"‚úÖ –ú–µ—Ç–æ–¥ {method}: –≤—Ä–µ–º—è={data['total_time']:.1f}–º–∏–Ω, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ={data['total_distance']:.2f}–∫–º")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –º–µ—Ç–æ–¥–∞ {method}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ—Ç–æ–¥–∞ {method}: {e}")
        
        return results
    
    def test_different_traffic_levels(self):
        """–¢–µ—Å—Ç –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –¥–æ—Ä–æ–≥"""
        traffic_levels = [0, 3, 5, 8, 10]
        results = {}
        
        print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏...")
        
        for traffic in traffic_levels:
            try:
                params = {
                    "start_time": "09:00",
                    "traffic_level": traffic,
                    "transport_mode": "car",
                    "optimization_method": "genetic",
                    "max_points": 6
                }
                
                response = requests.post(f"{self.api_url}/optimize-route-from-dataset", params=params)
                
                if response.status_code == 200:
                    data = response.json()
                    results[traffic] = {
                        "total_time": data['total_time'],
                        "total_distance": data['total_distance']
                    }
                    print(f"‚úÖ –¢—Ä–∞—Ñ–∏–∫ {traffic}: –≤—Ä–µ–º—è={data['total_time']:.1f}–º–∏–Ω, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ={data['total_distance']:.2f}–∫–º")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è —Ç—Ä–∞—Ñ–∏–∫–∞ {traffic}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞ {traffic}: {e}")
        
        return results
    
    def create_route_map(self, route_data, filename="route_map.html"):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞"""
        if not route_data or 'route_coordinates' not in route_data:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã")
            return
        
        coordinates = route_data['route_coordinates']
        arrival_times = route_data.get('arrival_times', [])
        
        m = folium.Map(
            location=[coordinates[0][0], coordinates[0][1]],
            zoom_start=12
        )
        
        for i, (lat, lon) in enumerate(coordinates):
            color = 'red' if i == 0 else 'blue'
            arrival_time = arrival_times[i] if i < len(arrival_times) else ""
            
            folium.Marker(
                [lat, lon],
                popup=f"–¢–æ—á–∫–∞ {i+1}<br>–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {arrival_time}",
                icon=folium.Icon(color=color, icon='info-sign')
            ).add_to(m)
        
        folium.PolyLine(
            coordinates,
            color="green",
            weight=3,
            opacity=0.8
        ).add_to(m)
        
        m.save(filename)
        print(f"‚úÖ –ö–∞—Ä—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {filename}")
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤")
        print("=" * 60)
        
        print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞")
        if not self.test_health():
            print("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ FastAPI —Å–µ—Ä–≤–µ—Ä.")
            return
        
        print("\n2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—Ç–∞—Å–µ—Ç–µ")
        dataset_info = self.test_dataset_info()
        
        print("\n3. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞")
        route_data = self.test_route_optimization_from_dataset()
        
        print("\n4. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞")
        custom_route = self.test_custom_route_optimization()
        
        print("\n5. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        method_comparison = self.compare_optimization_methods()
        
        print("\n6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏")
        traffic_results = self.test_different_traffic_levels()
        
        if route_data:
            print("\n7. –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞")
            self.create_route_map(route_data)
        
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("=" * 60)
        
        if route_data:
            print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print(f"   –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: {len(route_data['optimized_order'])} —Ç–æ—á–µ–∫")
            print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {route_data['total_time']} –º–∏–Ω—É—Ç")
            print(f"   –û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {route_data['total_distance']} –∫–º")
        
        if method_comparison:
            print(f"\nüìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤:")
            for method, result in method_comparison.items():
                print(f"   {method}: {result['total_time']:.1f}–º–∏–Ω, {result['processing_time']:.2f}—Å–µ–∫")
        
        if traffic_results:
            print(f"\nüö¶ –í–ª–∏—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –¥–æ—Ä–æ–≥:")
            for traffic, result in traffic_results.items():
                print(f"   –¢—Ä–∞—Ñ–∏–∫ {traffic}: {result['total_time']:.1f}–º–∏–Ω")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    tester = RouteOptimizationTester()
    tester.run_all_tests()

if __name__ == "__main__":
    main()
