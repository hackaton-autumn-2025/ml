import numpy as np
from typing import List, Tuple, Dict
from datetime import time
import random

class TSPOptimizer:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∞–∑–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∫–æ–º–º–∏–≤–æ—è–∂–µ—Ä–∞ (TSP)
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TSP –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞"""
        pass
    
    def calculate_distance_matrix(self, points) -> np.ndarray:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏"""
        n = len(points)
        distance_matrix = np.zeros((n, n))
        
        for i in range(n):
            for j in range(n):
                if i != j:
                    lat1, lon1 = points[i].latitude, points[i].longitude
                    lat2, lon2 = points[j].latitude, points[j].longitude
                    
                    # –ü—Ä–æ—Å—Ç–∞—è –µ–≤–∫–ª–∏–¥–æ–≤–∞ —Ñ–æ—Ä–º—É–ª–∞ (–Ω–µ —Ç–æ—á–Ω–∞—è, –Ω–æ –±—ã—Å—Ç—Ä–∞—è)
                    distance = np.sqrt((lat2 - lat1)**2 + (lon2 - lon1)**2) * 111  # –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –∫–º
                    distance_matrix[i][j] = distance
                else:
                    distance_matrix[i][j] = 0
        
        return distance_matrix
    
    def simple_nearest_neighbor_tsp(self, distance_matrix: np.ndarray, start_point: int = 0) -> List[int]:
        """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–æ—Å–µ–¥–∞ –¥–ª—è TSP"""
        n = len(distance_matrix)
        visited = [False] * n
        route = [start_point]
        visited[start_point] = True
        current = start_point
        
        while len(route) < n:
            nearest = -1
            min_distance = float('inf')
            
            for i in range(n):
                if not visited[i] and distance_matrix[current][i] < min_distance:
                    min_distance = distance_matrix[current][i]
                    nearest = i
            
            if nearest != -1:
                route.append(nearest)
                visited[nearest] = True
                current = nearest
        
        return route
    
    def simple_random_tsp(self, distance_matrix: np.ndarray, start_point: int = 0) -> List[int]:
        """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–π —Å–ª—É—á–∞–π–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º TSP"""
        n = len(distance_matrix)
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ
        route = list(range(n))
        route.remove(start_point)
        random.shuffle(route)
        return [start_point] + route
    
    def simple_sequential_tsp(self, distance_matrix: np.ndarray, start_point: int = 0) -> List[int]:
        """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º TSP"""
        n = len(distance_matrix)
        
        # –ü—Ä–æ—Å—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –æ–±—Ö–æ–¥
        route = list(range(n))
        return route
    
    def calculate_route_distance(self, route: List[int], distance_matrix: np.ndarray) -> float:
        """–ü—Ä–æ—Å—Ç–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞"""
        total_distance = 0
        for i in range(len(route) - 1):
            total_distance += distance_matrix[route[i]][route[i + 1]]
        return total_distance
    
    def optimize_route(self, points, method: str = 'nearest_neighbor') -> List[int]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞ TSP (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–π)"""
        distance_matrix = self.calculate_distance_matrix(points)
        
        if method == 'nearest_neighbor':
            # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–æ—Å–µ–¥–∞
            route = self.simple_nearest_neighbor_tsp(distance_matrix, 0)
        elif method == 'random':
            # –ü—Ä–æ—Å—Ç–æ–π —Å–ª—É—á–∞–π–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
            route = self.simple_random_tsp(distance_matrix, 0)
        elif method == 'sequential':
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
            route = self.simple_sequential_tsp(distance_matrix, 0)
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–µ–π—à–∏–π –º–µ—Ç–æ–¥
            route = self.simple_nearest_neighbor_tsp(distance_matrix, 0)
        
        return route
    
    def calculate_arrival_times(self, route: List[int], points, time_matrix, start_time: time) -> List[str]:
        """–†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è –≤ –∫–∞–∂–¥—É—é —Ç–æ—á–∫—É"""
        arrival_times = []
        current_time = start_time.hour * 60 + start_time.minute  # –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö
        
        for i, point_idx in enumerate(route):
            arrival_times.append(f"{int(current_time // 60):02d}:{int(current_time % 60):02d}")
            
            current_time += points[point_idx].stop_duration
            
            if i < len(route) - 1:
                next_idx = route[i + 1]
                current_time += time_matrix[point_idx][next_idx]
        
        return arrival_times

if __name__ == "__main__":
    from app.schemas.models import RoutePoint, ClientLevel
    
    test_points = [
        RoutePoint(
            id=0, address="–¢–æ—á–∫–∞ A", latitude=47.221532, longitude=39.704423,
            work_start="09:00", work_end="18:00", lunch_start="13:00", lunch_end="14:00",
            client_level=ClientLevel.VIP, stop_duration=30
        ),
        RoutePoint(
            id=1, address="–¢–æ—á–∫–∞ B", latitude=47.235671, longitude=39.689543,
            work_start="09:00", work_end="18:00", lunch_start="13:00", lunch_end="14:00",
            client_level=ClientLevel.STANDARD, stop_duration=20
        ),
        RoutePoint(
            id=2, address="–¢–æ—á–∫–∞ C", latitude=47.245123, longitude=39.712345,
            work_start="09:00", work_end="18:00", lunch_start="13:00", lunch_end="14:00",
            client_level=ClientLevel.VIP, stop_duration=25
        )
    ]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
    tsp_optimizer = TSPOptimizer()
    route = tsp_optimizer.optimize_route(test_points, method='nearest_neighbor')
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –£–ü–†–û–©–ï–ù–ù–û–ì–û TSP –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
    print("=" * 60)
    
    methods = ['nearest_neighbor', 'random', 'sequential']
    
    for method in methods:
        print(f"\nüìà –ú–µ—Ç–æ–¥: {method}")
        route = tsp_optimizer.optimize_route(test_points, method=method)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        distance_matrix = tsp_optimizer.calculate_distance_matrix(test_points)
        total_distance = tsp_optimizer.calculate_route_distance(route, distance_matrix)
        
        print(f"   –ú–∞—Ä—à—Ä—É—Ç: {route}")
        print(f"   –û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {total_distance:.2f} –∫–º")
    
    print("\n" + "=" * 60)
    print("üìù –í–´–í–û–î–´:")
    print("‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π TSP –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ:")
    print("   - –ù–ï —É—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç VIP –∫–ª–∏–µ–Ω—Ç–æ–≤")
    print("   - –ù–ï –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –ø–æ—Å–µ—â–µ–Ω–∏—è")
    print("   - –ù–ï —É—á–∏—Ç—ã–≤–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã")
    print("   - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –ø—Ä–æ—Å—Ç—ã–µ –º–µ—Ç–æ–¥—ã")
    print("\nüéØ –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö")
    print("   –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ GNN!")